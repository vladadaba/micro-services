version: "3.8"
services:
  gateway:
    image: envoyproxy/envoy:${ENVOY_VERSION}
    ports:
      - "9901:9901"
      - "10000:10000"
      - "10001:10001"
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy/certs/https.crt:/etc/ssl/certs/https.crt
      - ./envoy/certs/key.pem:/etc/ssl/certs/key.pem

  job_service:
    build:
      context: ../src/services/JobService
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    environment:
      ASPNETCORE_URLS: "http://+"
      ASPNETCORE_HTTPS_PORT: 5001
      ASPNETCORE_ENVIRONMENT: Development
      Database__ConnectionString: "Server=db;Port=5432;Database=jobs;Username=postgres;Password=password;"
      Serilog__WriteTo__1__Args__nodeUris: "http://elastic:9200"
    depends_on:
      - db

  credit_service:
    build:
      context: ../src/services/CreditService
      dockerfile: Dockerfile
    ports:
      - "5002:80"
    environment:
      ASPNETCORE_URLS: "http://+"
      ASPNETCORE_HTTPS_PORT: 5002
      ASPNETCORE_ENVIRONMENT: Development
      Database__ConnectionString: "Server=db;Port=5432;Database=credits;Username=postgres;Password=password;"
      Serilog__WriteTo__1__Args__nodeUris: "http://elastic:9200"
    depends_on:
      - db

  worker_service:
    build:
      context: ../src/services/WorkerService
      dockerfile: Dockerfile
    ports:
      - "5003:80"
    environment:
      ASPNETCORE_URLS: "http://+"
      ASPNETCORE_HTTPS_PORT: 5003
      ASPNETCORE_ENVIRONMENT: Development
      Kafka__BootstrapServers: "kafka:9092"
    depends_on:
      - kafka

  db:
    image: debezium/postgres:${DEBEZIUM_PG_VERSION}
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: jobs
    volumes:
      - ./data/db:/var/lib/postgresql/data

  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_KAFKA_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    volumes:
      - ./data/zk/data:/zookeeper/data
      - ./data/zk/datalog:/zookeeper/txns
      - ./data/zk/conf:/zookeeper/conf

  kafka:
    image: debezium/kafka:${DEBEZIUM_KAFKA_VERSION}
    environment:
      ## the >- used below infers a value which is a string and properly 
      ## ignore the multiple lines resulting in one long string: 
      ## https://yaml.org/spec/1.2/spec.html
      KAFKA_ADVERTISED_LISTENERS: >- 
        LISTENER_DOCKER_INTERNAL://kafka:19092, 
        LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-kafka}:9092
      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >- 
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: >- 
        kafka.controller=INFO,
        kafka.producer.async.DefaultEventHandler=INFO,
        state.change.logger=INFO
      CREATE_TOPICS: "outbox.event.job:1:1"
      ZOOKEEPER_CONNECT: "zookeeper:2181"
      BROKED_ID: 1
    ports:
      - 9092:9092
    volumes:
      - ./data/kafka:/kafka/data/1
    links:
      - zookeeper
    depends_on:
      - zookeeper

  connect:
    image: debezium/connect:${DEBEZIUM_KAFKA_VERSION}
    ports:
      - 8083:8083
    links:
      - kafka
      - db
    environment:
      BOOTSTRAP_SERVERS: "kafka:9092"
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    volumes:
      - ./connectors:/scripts
    command: 
      - bash 
      - -c 
      - |
        /scripts/create-postgres-source.sh connect 8083 &
        /docker-entrypoint.sh start
    
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}-amd64
    volumes: 
      - ./data/elastic:/usr/share/elasticsearch/data
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - discovery.type=single-node
    ports:
      - 9200:9200
      - 9300:9300
  
  kibana:
    image: 'docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}'
    environment: 
      ELASTICSEARCH_HOSTS: http://elastic:9200
    ports:
      - 5601:5601
    depends_on: 
      - elastic
